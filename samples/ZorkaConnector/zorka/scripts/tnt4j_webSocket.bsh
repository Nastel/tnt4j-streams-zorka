/*
 * Copyright 2014-2017 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

 zorka.require("tracer.bsh");

__java_webSocket() {

    _SESSION = new ThreadLocal();
    _TRACKING_RECEIVE = new ThreadLocal();
    _TRACKING_SEND = new ThreadLocal();
	
    augment_message() {
        process(rec) {
            StringBuilder sb = new StringBuilder();
            sb.append("{");
            sb.append("\"ZORKA\": \"TRUE\"");
            sb.append(", ");
            sb.append("\"ReceiveTrackingID\": \"");
            String rtid = _TRACKING_RECEIVE.get();
            sb.append(rtid);
            sb.append("\", ");
            sb.append("\"SendTrackingID\": \"");
            String stid = _TRACKING_SEND.get();
            sb.append(stid);
            sb.append("\", ");
            sb.append("\"SESSION_ID\": \"");
            String sessionUUID = _SESSION.get();
            sb.append(sessionUUID);
            endpoint = rec.get("ENDPOINT");
            sb.append("\"}");
            rec.put("SendTrackingID", stid);
            endpoint.sendText(sb.toString(), true);
            rec.put("ReceiveTrackingID", rtid);
            rec.put("SESSION", sessionUUID);

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    augment_message_session() {
        process(rec) {
            handler = rec.get("MESSAGE_HANDLER");
            java.lang.reflect.Field myField = getField(handler.getClass(), "session");
            myField.setAccessible(true);
            org.apache.tomcat.websocket.WsSession session = myField.get(handler);

            String sessionID = session.getHttpSessionId();
            StringBuilder sessionUUID = new StringBuilder();
             //8-4-4-4-12
            sessionUUID.append(sessionID.substring(0,8));
            sessionUUID.append("-");
            sessionUUID.append(sessionID.substring(8,12));
            sessionUUID.append("-");
            sessionUUID.append(sessionID.substring(12,16));
            sessionUUID.append("-");
            sessionUUID.append(sessionID.substring(16,20));
            sessionUUID.append("-");
            sessionUUID.append(sessionID.substring(20,32));

            String rtid = java.util.UUID.randomUUID().toString();
            String stid = java.util.UUID.randomUUID().toString();

            _TRACKING_SEND.set(stid);
            _TRACKING_RECEIVE.set(rtid);
            _SESSION.set(sessionUUID.toString());
            rec.put("ReceiveTrackingID", rtid);
            rec.put("SESSION", sessionUUID);

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    message_processor() {
        process(rec) {
            maxlen = 30;
            message = rec.get("MSG");
            if (message != null && message.length() > maxlen) {
                message = message.substring(0, maxlen) + "...";
                rec.put("MSG", message);
            } else if (message == null) {
                rec.put("MSG", "null");
            }

            return rec;			
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    getField(Class clazz, String fieldName) {
        try {
            return clazz.getDeclaredField(fieldName);
        } catch (NoSuchFieldException e) {
            Class superClass = clazz.getSuperclass();
            if (superClass == null) {
                throw e;
            } else {
                return getField(superClass, fieldName);
            }
        }
    }

    spy.add(spy.instrument ("WEB_SOCKET_SEND")
        .onEnter(
            spy.fetchArg("MSG", 1),
            spy.fetchArg("ENDPOINT", 0),
            tracer.begin("WebSocket"),
            augment_message(),
            message_processor(),
            tracer.formatAttr("MARKER", "WebSocket"),
            tracer.formatAttr("METHOD", "WebSocket Send"),
            tracer.formatAttr("EVENT_TYPE", "SEND"),
            //tracer.attr("TrackingID", "SendTrackingID"),
            //spy.zorkaLog("DEBUG", "WEB_SOCKET", "########################WEB_SOCKET_SEND####################"),
            tracer.attr("MSG", "MSG")
        )
        .onReturn(
            //spy.zorkaLog("DEBUG", "WEB_SOCKET", "########################WEB_SOCKET_SEND RETURN####################"),
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(
            spy.byInterfaceAndMethod(0, "javax.websocket.RemoteEndpoint$Basic", "sendText", "void", "java.lang.String",
                "boolean"),
            spy.byInterfaceAndMethod(0, "javax.websocket.RemoteEndpoint$Basic", "sendText", "void", "java.lang.String")
        )
    );

    spy.add(spy.instrument ("WEB_SOCKET_RECEIVE")
        .onEnter(
            spy.fetchArg("MESSAGE_HANDLER", 0),
            spy.fetchArg("MSG", 1),
            tracer.begin("WebSocket"),
            message_processor(),
            augment_message_session(),
            // spy.format("SESSION", "${MESSAGE_HANDLER.session.getHttpSessionId()}" ),
            tracer.formatAttr("MARKER", "WebSocket"),
            tracer.formatAttr("METHOD", "WebSocket Receive"),
            tracer.formatAttr("EVENT_TYPE", "RECEIVE"),
            tracer.attr("TrackingID", "ReceiveTrackingID"),
            //spy.zorkaLog("DEBUG", "WEB_SOCKET", "########################WEB_SOCKET_RECEIVE####################"),
            tracer.attr("SESSION", "SESSION"),
            tracer.attr("MSG", "MSG")
        )
        .onReturn(
            //spy.zorkaLog("DEBUG", "WEB_SOCKET", "########################WEB_SOCKET_RECEIVE RETURN####################"),
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(
            spy.byInterface("javax.websocket.MessageHandler$Partial"),
            spy.byInterface("javax.websocket.MessageHandler$Whole")
        )
    );

    //tracer.include("com.slabs.jsfManaged.**", "org.apache.tomcat.websocket.**");

    return this;
}

java_webSocket = __java_webSocket();
