/*
 * Copyright 2014-2018 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

// This file contains instrumentation definitions for Apache httpclient library.

zorka.require(
  "tracer.bsh"
);

__nastel_httpclient() {

  zorka.defCfg("tnt4j.log", "no");
  _log = zorka.boolCfg("tnt4j.log");

  response_processor() {
      process(rec) {
          method = rec.get("RET");
          if (method != null) {
            ihdr = util.get(method, "getAllHeaders");
            if (method != null && ihdr != null) {
              for (hdr : ihdr) {
                tracer.newAttr("RespHdr__" + hdr.getName(), ""+hdr.getValue());
              }
            }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  paramsProcessor() {
      process(rec) {
          met = rec.get("METHOD");
          uri = met.getUri();
          try {
            uriVsParams = uri.toString().split("\\?");
            tracer.newAttr("URI", uriVsParams[0]);
            parameters = uriVsParams[1].toString().split("&");
            for (param : parameters) {
              keyValue = param.toString().split("=");
              tracer.newAttr(keyValue[0], keyValue[1]);
            }
          } catch (java.lang.Exception e) {}
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  spy.add(
    spy.instrument("NASTEL_HTTPCLIENT_SEND")
      .onEnter(
          spy.fetchArg("METHOD", 1),
          spy.fetchArg("CONNECTION", 0),
          tracer.begin("HTTP_CLI_SEND"),
          tracer.formatAttr("URI", "${METHOD.getUri()}"),
          paramsProcessor(),
          tracer.formatAttr("HOST", "${CONNECTION.httpHost}"),
          tracer.formatAttr("EVENT_TYPE", "SEND"),
          tracer.formatAttr("METHOD", "${METHOD.getMethod()}")
      )
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
          _log ? spy.zorkaLog("DEBUG", "HTTP_CLI", "########################HTTP_CLI SEND ####################") : null,
          tracer.flags(tracer.SUBMIT_TRACE)
      )
      .include(spy.byMethod(spy.AC_PUBLIC, "com.nastel.jkool.net.http.**", "sendRequest", "void","com.nastel.jkool.net.http.HttpRequest", "boolean"))
  );

  headers_processor1() {
      process(rec) {
          req = rec.get("REQ");
          if (req != null && req.getAllHeaders() != null) {
              for (hdr : req.getAllHeaders()) {
                  tracer.newAttr("ReqHdr__" + hdr.getName(), ""+hdr.getValue());
              }
          }
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  spy.add(
    spy.instrument("NASTEL_HTTPCLIENT_GET")
      .onEnter(
          tracer.begin("HTTP_CLI_RECEIVE")
      )
      .onReturn(
          spy.fetchRetVal("RET"),
          /*tracer.formatAttr("CONTENT", "${RET.getContentString()}"), can't do causes internals unstable*/
          tracer.formatAttr("EVENT_TYPE", "RECEIVE"),
          tracer.formatAttr("STATUS", "${RET.getStatus().getCode()}"),
          response_processor()
      )
      .onError(tracer.flags(tracer.SUBMIT_TRACE))
      .onSubmit(
          _log ? spy.zorkaLog("DEBUG", "HTTP_CLI", "########################HTTP_CLI RECEIVE  ####################") : null,
          tracer.flags(tracer.SUBMIT_TRACE)
      )
      .include(spy.byMethod(spy.AC_PUBLIC, "com.nastel.jkool.net.http.**", "getResponse", "com.nastel.jkool.net.http.HttpResponse")));

     tracer.exclude("org.apache.http.**");

     return this;
}

nastel_httpclient = __nastel_httpclient();
