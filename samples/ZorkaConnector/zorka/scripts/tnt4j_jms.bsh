/*
 * Copyright 2014-2018 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("javax/jms.bsh", "tnt4j_comm.bsh");

// Generic JMS monitoring

__javax_tnt4j_jms() {

    _fetchMapTNTProcessor() {
      process(rec) {
        names = rec.get("MAP_NAMES");
        msg = rec.get("MSG");
        if (names != null && msg != null) {
          text = "";
          while (names.hasMoreElements()) {
            name = names.nextElement();
            text = text + name + "=" + msg.getObject(name) + ", "; 
          }
          zorka.logInfo("######################## TEXT: " + text);
          tracer.newAttr("TEXT", text);
        }

        return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    _log = zorka.boolCfg("tnt4j.log", false);
    _logLevel = zorka.stringCfg("tnt4j.log.level", "DEBUG");
    _fetchMapTNT = zorka.boolCfg("jms.fetch.map", true)
        ? spy.subchain(spy.get("MAP_NAMES", "MSG", "mapNames"), _fetchMapTNTProcessor())
        : null;

    modifyJMSMessage() {
        process(rec) {
            _log ? zorka.logInfo("Attributing message with correlator") : null;
            message = rec.get("MSG");
            if (message instanceof com.ibm.ws.sib.mfp.impl.JsJmsMessageImpl) {
                propertyName = zorka.stringCfg("tnt4j.jms.correlator.name", "JanusMessageSignature" );
                String tntID =  java.util.UUID.randomUUID().toString();
                rec.put("JanusMessageSignature", tntID);
                ((com.ibm.ws.sib.mfp.impl.JsJmsMessageImpl) message).setObjectProperty(propertyName, tntID);
                // NOTE! Cant't start with JMS*
                // Other special cases: JMSXAppID, JMSXUserID, JMS_IBM_MQMD_*, JMS_IBM_Character_Set, JMS_IBM_Encoding
                _log ? zorka.logInfo("Success") : null;
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    _fetchPropsProcessorWMQ() {
        process(rec) {
            msg = rec.get("MSG");
            if (msg != null) {
                names = msg.getPropertyNameSet();
                iterator = names.iterator();
                while (iterator.hasNext()) {
                    name = iterator.next();
                    tracer.newAttr(javax_jms._propPrefix+name, ""+msg.getObjectProperty(name));
                }
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    _fetchAttrsWMQ = zorka.boolCfg("jms.fetch.attrs")
        ? spy.subchain(
            spy.get("ID", "MSG", "ApiMessageId"), tracer.attr("ID", "ID"),
            spy.get("TSTAMP", "MSG", "Timestamp"), spy.strClock("TSTAMP", "TSTAMP"), tracer.attr("TSTAMP", "TSTAMP"),
            spy.get("CORRELATION", "MSG", "CorrelationID"), tracer.attr("CORRELATION", "CORRELATION"),
            spy.get("PERSIST", "MSG", "DerivedJmsDeliveryMode"), tracer.attr("PERSIST", "PERSIST"),
            spy.get("REDELIVERY", "MSG", "JMSRedelivered"), tracer.attr("REDELIVERY", "REDELIVERY"),
            spy.get("JMSTYPE", "MSG", "JmsType"), tracer.attr("JMSTYPE", "JMSTYPE"),
            spy.get("PRIORITY", "MSG", "Priority"), tracer.attr("PRIORITY", "PRIORITY"),
            spy.get("EXPIRATION", "MSG", "JmsExpiration"), tracer.attr("EXPIRATION", "EXPIRATION"))
        : null;

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_LISTENER")
        .onEnter(
            spy.fetchArg("MSG", 1),
            tracer.isInTrace("HTTP") ? (_log ? spy.zorkaLog(_logLevel, "JMS", "already in trace") : null) : tracer.begin("JMS_RECEIVE"),
            __tnt4j.attrAppl("JMS"),
            __tnt4j.attrCorrelator(),
            __tnt4j.getThread(),
            tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "JMS_RECEIVE"),
            spy.fetchArg("THIS", 0),

         // _modifyJMSMessages(),
            _log ? spy.zorkaLog(_logLevel, "JMS", "######## ${THIS} ###### ${MSG.getJMSDestination} ##########onMessage####### ${RES} ###### ${APPL} ####### ${JK_CORR_RID} ") : null,
            spy.format("DESTINATION", "${MSG.getJMSDestination:unknown}"), 
            spy.call("RESULT", "MSG", "setStringProperty", (String) "MARIUS", (String) "MARIUS"),
            tracer.attr("DESTINATION","DESTINATION"),
            spy.format("RECEIVE", "RECEIVE"),
            tracer.attr("EVENT_NAME", "RECEIVE"),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps,
            tracer.isInTrace("HTTP") ? null : tracer.flags(tracer.SUBMIT_TRACE)
        )
        .onError(
            spy.fetchError("ERR"), spy.markError(),
            _log ? spy.zorkaLog(_logLevel, "JMS", "######## OnMessage error ########") : null
        )
        .include(spy.byInterfaceAndMethod(0, "javax.jms.MessageListener", "onMessage", "void", "javax.jms.Message"))
    );

    spy.add(spy.instrument("JAVAX_JMS_PRODUCER1")
        .onEnter(
            spy.fetchArg("MSG", 1),
            spy.fetchArg("THIS", 0),
            _log ? spy.zorkaLog(_logLevel, "JMS", "#######################send####################") : null,
            tracer.isInTrace("HTTP") ? null : tracer.begin("JMS_SEND"),
            __tnt4j.attrAppl("JMS"),
            tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "JMS_SEND"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"),
            spy.format("SEND", "SEND"),
            tracer.attr("EVENT_TYPE", "SEND"),
            tracer.attr("EVENT_NAME", "SEND"),
            __tnt4j.getThread(),
        //  _modifyJMSMessages(),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps
        )
        .onError(
            _log ? spy.zorkaLog(_logLevel, "JMS", "######## send error ########") : null
        )
        .onReturn(
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(
            spy.byInterfaceAndMethod(0, "javax.jms.MessageProducer", "send", "void", "javax.jms.Message")
        )
    );

    spy.add(spy.instrument("JAVAX_JMS_PRODUCER2")
        .onEnter(
            spy.fetchArg("MSG", 2),
            spy.fetchArg("THIS", 0),
            _log ? spy.zorkaLog(_logLevel, "JMS", "#######################send2####################") : null,
            tracer.isInTrace("HTTP") ? null : tracer.begin("JMS_SEND2"),
            __tnt4j.attrAppl("JMS"),
            tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "JMS_SEND2"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"),
            __tnt4j.getThread(),
            spy.format("SEND", "SEND"),
            tracer.attr("EVENT_NAME", "SEND"),
            tracer.attr("EVENT_TYPE", "SEND"),
         // _modifyJMSMessages(),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps,
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(
            spy.byInterfaceAndMethod(0, "javax.jms.MessageProducer", "send", "void", "javax.jms.Destination", "javax.jms.Message")
        )
    );

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_CONSUMER")
        .onEnter(
            spy.fetchArg("THIS", 0),

            tracer.isInTrace("HTTP") ?
                spy.zorkaLog(_logLevel, "JMS", "Already in trace HTTP") :
                (tracer.isInTrace("JMS_RECEIVE") ?
                    spy.zorkaLog(_logLevel, "JMS", "Already in trace JMS") :
                    tracer.begin("JMS_RECEIVE")),
            __tnt4j.attrAppl("JMS"),

            spy.subchain(
                spy.format("CONSUMER_CLASS", "${THIS.class.name}"),
                spy.regexFilterOut("CONSUMER_CLASS", "com.ibm.ejs.jms.JMSQueueReceiverHandle"),
                tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "JMS_RECEIVE"),
                spy.call("DEST_NAME", "THIS", "getDestinationName"),
                spy.call("DEST", "THIS", "getDestination"),
                spy.format("DESTINATION", "${DEST_NAME|DEST|THIS.destination:unknown}"),
                _log ? spy.zorkaLog(_logLevel, "JMS", "#######################receive#####${CONSUMER_CLASS}##${DEST} ${DEST_NAME} ${THIS.destination}#############") : null,
                tracer.attr("DESTINATION","DESTINATION")
            )
        )
        .onReturn(
            spy.fetchRetVal("MSG"),
            __tnt4j.getThread(),
            __tnt4j.attrCorrelator(),
            __tnt4j.attrAppl("JMS"),
            spy.format("RECEIVE", "RECEIVE"),
            tracer.attr("EVENT_NAME", "RECEIVE"),
            tracer.attr("EVENT_TYPE", "RECEIVE"),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps,
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(spy.byInterfaceAndMethod(spy.AC_PUBLIC, "javax.jms.MessageConsumer", "~receive.*", "javax.jms.Message"))
    );

    return this;
}

javax__tnt4j_jms = __javax_tnt4j_jms();
