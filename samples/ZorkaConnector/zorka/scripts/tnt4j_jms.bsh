/*
 * Copyright 2014-2016 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */
  
zorka.require("tnt4j_base_tomcat.bsh", "javax/jms.bsh");

// Generic JMS monitoring

__javax_jms() {

	_fetchMapTNTProcessor() {
      process(rec) {
        names = rec.get("MAP_NAMES");
        msg = rec.get("MSG");
        if (names != null && msg != null) {
		  text = "";
          while (names.hasMoreElements()) {
            name = names.nextElement();
			text = text + name + "=" + msg.getObject(name) + ", "; 
          }

          tracer.newAttr("TEXT", text);
        }

        return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    _fetchMapTNT = zorka.boolCfg("jms.fetch.map")
        ? spy.subchain(spy.get("MAP_NAMES", "MSG", "mapNames"), _fetchMapTNTProcessor())
        : null;

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_LISTENER")
        .onEnter(spy.fetchArg("MSG", 1),
            spy.fetchArg("THIS", 0),
            tracer.begin("JMS_TNT4J_STREAMS_TRACKER"),
            tnt4j._attributeTntCorrIds(),
            //spy.zorkaLog("DEBUG", "JMS", "########################onMessage####################"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"),
            spy.format("RECEIVE", "RECEIVE"),
            tracer.attr("EVENT_NAME", "RECEIVE"),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps//,
            //tracer.flags(tracer.SUBMIT_TRACE))
        .onError(spy.fetchError("ERR"), spy.markError())
        .include(spy.byInterfaceAndMethod(0, "javax.jms.MessageListener", "onMessage", "void", "javax.jms.Message"))
    );

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_PRODUCER1")
        .onEnter(spy.fetchArg("MSG", 1),
            spy.fetchArg("THIS", 0),
            tracer.begin("JMS_TNT4J_STREAMS_TRACKER"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"),
            spy.format("SEND", "SEND"),
            tracer.attr("EVENT_NAME", "SEND"),
            //spy.zorkaLog("DEBUG", "JMS", "#######################send####################"),
            tnt4j._attributeTntCorrIds(),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps//,
            //tracer.flags(tracer.SUBMIT_TRACE))
        .include(spy.byInterfaceAndMethod(0, "javax.jms.MessageProducer", "send", "void", "javax.jms.Message"))
    );

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_PRODUCER2")
        .onEnter(spy.fetchArg("MSG", 2),
            spy.fetchArg("THIS", 0),
            tracer.begin("JMS_TNT4J_STREAMS_TRACKER"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"),
            //spy.zorkaLog("DEBUG", "JMS", "#######################send2####################"),
            spy.format("SEND", "SEND"),
            tracer.attr("EVENT_NAME", "SEND"),
            tnt4j._attributeTntCorrIds(),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps//,
            //tracer.flags(tracer.SUBMIT_TRACE))
        .include(spy.byInterfaceAndMethod(0, "javax.jms.MessageProducer", "send", "void",
            "javax.jms.Destination", "javax.jms.Message"))
    );

    spy.add(spy.instrument("JMS_TNT4J_STREAMS_CONSUMER")
        .onEnter(spy.fetchArg("THIS", 0),
            tracer.begin("JMS_TNT4J_STREAMS_TRACKER"),
            spy.call("RES", "THIS", "getDestination"),
            spy.format("DESTINATION", "${RES:unknown}"),
            tracer.attr("DESTINATION","DESTINATION"))
        .onReturn(spy.fetchRetVal("MSG"),
            //spy.zorkaLog("DEBUG", "JMS", "#######################receive####################"),
            spy.format("RECEIVE", "RECEIVE"),
            tracer.attr("EVENT_NAME", "RECEIVE"),
            tnt4j._attributeTntCorrIds(),
            javax_jms._fetchAttrs, javax_jms._fetchText, _fetchMapTNT, javax_jms._fetchProps//,
            //tracer.flags(tracer.SUBMIT_TRACE))
        .include(spy.byInterfaceAndMethod(0, "javax.jms.MessageConsumer", "~receive.*", "javax.jms.Message"))
    );

    return this;
}

javax_jms = __javax_jms();
