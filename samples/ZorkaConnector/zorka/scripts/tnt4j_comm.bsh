/*
 * Copyright 2014-2018 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

// zorka.require();

__tnt4j() {

     // Logging helpers
    _log = zorka.boolCfg("tnt4j.log", false);
    _logLevel = zorka.stringCfg("tnt4j.log.level", "DEBUG");

    // Application resolving

    _APPLICATION = new ThreadLocal();

    /** 
     *  Sets the application from the webserver request URI
     *
     */
    resolveAppl() {
        process(rec) {
            req  = rec.get("REQ");
            if (req != null) {
                hdrs = req.getHeaders("Referer");
                if (hdrs != null) {
                    i = 0;
                    for (hdr : hdrs) {
                        try {
                            java.net.URI uris = new java.net.URI(hdr);
                            String appl = java.nio.file.Paths.get(uris.getPath()).getName(0).toString();
                            rec.put("APPLHANDLE", appl);
                            _APPLICATION.set(appl);
                        } catch (Exception e) {
                        }
                        break;
                    }
                }
            }

            return rec;
        }
        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    /**
     *  Adds a trace attribute with application name 
     *
     */
    attrAppl(defaultApplName) {
        process(rec) {
            cachedApplName = _APPLICATION.get();
            if (cachedApplName == null) {
                  tracer.newAttr("APPL", defaultApplName.toString());
                rec.put("APPL", defaultApplName.toString());
            } else {
                  tracer.newAttr("APPL", cachedApplName);
                rec.put("APPL", cachedApplName);
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    // Common correlator feature

    /** 
     *  Generates new UUID to correlate variuos application calls
     *
     */
    _TRACKING_RECEIVE = new ThreadLocal();

    generateCommonCorrelator() {
        process(rec) {
            String rtid =  java.util.UUID.randomUUID().toString();
            _log ? spy.zorkaLog(_logLevel, "WAS", "############################## CommonCorrelator: " + rtid): null;
            tracer.newAttr("JK_CORR_RID", rtid);
            _TRACKING_RECEIVE.set(rtid);

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    /**
     *  Adds a trace attribute with application name UUID to correlate variuos application calls
     *
     */
    attrCorrelator() {
        process(rec) {
            uuid = _TRACKING_RECEIVE.get();
            if (uuid != null) {
                  tracer.newAttr("JK_CORR_RID", uuid);
                rec.put("JK_CORR_RID", uuid);
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    // Other helpers

    printTrace() {
        process(rec) {
            _log ? zorka.logInfo("GETTING trace") : null;
            stakcTrace = Thread.currentThread().getStackTrace();

            for (i = 0; i < stakcTrace.length; i++) {
                zorka.logInfo(stakcTrace[i].toString());
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    getThread() {
        process(rec) {
            thread = Thread.currentThread().getName();
            tracer.newAttr("THREAD",thread);
            _log ? spy.zorkaLog(_logLevel, "WAS", "##############################" + thread): null;

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    return this;
}

 __tnt4j = __tnt4j();