/*
 * Copyright 2014-2018 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

// zorka.require();

__tnt4j() {

    // Logging helpers
    _log = zorka.boolCfg("tnt4j.log", true);
    _logLevel = zorka.stringCfg("tnt4j.log.level", "DEBUG");

    // Application resolving

    _APPLICATION = new ThreadLocal();

    /**
     *  Sets the application from the webserver request URI
     *
     */
    resolveAppl() {
        process(rec) {
            req  = rec.get("REQ");
            if (req != null) {
                hdrs = req.getHeaders("Referer");
                if (hdrs != null) {
                    i = 0;
                    for (hdr : hdrs) {
                        try {
                            java.net.URI uris = new java.net.URI(hdr);
                            String appl = java.nio.file.Paths.get(uris.getPath()).getName(0).toString();
                            rec.put("APPL_HANDLE", appl);
                            _APPLICATION.set(appl);
                        } catch (Exception e) {
                        }
                        break;
                    }
                }
            }

            return rec;
        }
        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    /**
     * Atributes Trace with required fields for TNT4-Streams: MARKER, EVENT_TYPE, EVENT_NAME
     *
     */
    attributeTNT4J(marker, eventType, eventName) {
        process(rec) {
            rec.put("MARKER", marker);
            rec.put("EVENT_TYPE", eventType);
            rec.put("EVENT_NAME", eventName);
            tracer.newAttr("MARKER", marker);
            tracer.newAttr("EVENT_TYPE", eventType);
            tracer.newAttr("EVENT_NAME", eventName);

            zorka.logDebug("Will trace " + rec.get(".CTX").getShortClassName() + " " + rec.get(".CTX").getMethodName()  + " for TNT4J with marker: " + marker + " eventType: " + eventType + " eventName: " + eventName);
            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    /**
     *  Adds a trace attribute with application name
     *
     */
    attrAppl(defaultApplName) {
        process(rec) {
            cachedApplName = _APPLICATION.get(); 
            zorka.logDebug("######################## APPL: " + cachedApplName);

            if (cachedApplName == null) {
                if (rec.get("APPL") == null) {
                    tracer.newAttr("APPL", defaultApplName.toString());
                    rec.put("APPL", defaultApplName.toString());
                }
            } else {
                if (rec.get("APPL") == null) {
                    tracer.newAttr("APPL", cachedApplName);
                    rec.put("APPL", cachedApplName);
                }
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    clearAppl() {
        _APPLICATION = new ThreadLocal();
    }

    // Common correlator feature

    /**
     *  Generates new UUID to correlate various application calls
     *
     */
    _TRACKING_RECEIVE = new ThreadLocal();

    generateCommonCorrelator() {
        process(rec) {
            String rtid =  java.util.UUID.randomUUID().toString();
            zorka.logDebug("WAS ############################## CommonCorrelator: " + rtid);
            rec.put("JK_CORR_RID", rtid);
            tracer.newAttr("JK_CORR_RID", rtid);
            _TRACKING_RECEIVE.set(rtid);

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    /**
     *  Adds a trace attribute with application name UUID to correlate variuos application calls
     *
     */
    attrCorrelator() {
        process(rec) {
            uuid = _TRACKING_RECEIVE.get();
            if (uuid != null) {
                tracer.newAttr("JK_CORR_RID", uuid);
                rec.put("JK_CORR_RID", uuid);
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    // Other helpers

    printTrace() {
        process(rec) {
            _log ? zorka.logDebug("GETTING trace") : null;
            stackTrace = Thread.currentThread().getStackTrace();

            for (i = 0; i < stackTrace.length; i++) {
                zorka.logInfo(stackTrace[i].toString());
            }

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    getThread() {
        process(rec) {
            thread = Thread.currentThread().getName();
            tracer.newAttr("THREAD",thread);
            _log ? spy.zorkaLog(_logLevel, "WAS", "##############################" + thread): null;

            return rec;
        }

        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    return this;
}

 __tnt4j = __tnt4j();