/*
 * Copyright 2014-2018 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("sql.bsh", "tnt4j_comm.bsh");

// This script gets TNT4J Correlation IDs

__tnt4j_sql() {

    _trace = true;

    spy.add(
        spy.instrument("SQL_TNT4J_STREAMS_TRACKER")
            .onEnter(
                    spy.fetchArg("THIS", 0),
                    spy.fetchArg("ARG1", 1),
                    tracer.isInTrace("HTTP") ? null : (tracer.isInTrace("SQL") ? null : tracer.begin("SQL")),
                    spy.format("SERVER", "SERVER"),
                    spy.format("APPL", "${THIS.parentWrapper.j2eeNameObj.ivApplication|SERVER}"),
                    tracer.attr("APPL", "APPL"),

                    __tnt4j.attrCorrelator(),
                    tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "SQL"),
                    tracer.formatAttr("EVENT_TYPE", "SEND"),
                    tracer.isInTrace("HTTP") ? null : tracer.flags(tracer.SUBMIT_TRACE),
                    spy.format("SQL", "${THIS.sql|ARG1}"),
                    spy.format("DB", "${THIS.parentWrapper.mcf.dataSource.dataSourceJndiName}"),
                    spy.zorkaLog("DEBUG", "SQL", "########################execute ############# ${APPL} ####### ${JK_CORR_RID} ${JK_CORR_RID}  ${DB} ${SQL} ${THIS.class}"),
                    _trace
                        ? spy.subchain(
                            tracer.isInTrace("HTTP") ? null : tracer.begin("SQL", zorka.longCfg("sql.trace.time")),
                            tracer.attr("SQL", "SQL"),
                            __tnt4j.getThread(),
                            tracer.attr("DB", "DB"))
                        : null
            )
            .onError(
                    spy.fetchError("ERR"),
                    _trace ? tracer.flags(tracer.SUBMIT_TRACE) : null, 
                    sql._error_chain
            )
            .onSubmit(spy.strTime("TIME"), sql._slow_chain, sql._stats_chain)
            .include(
                spy.byMethod("com.ibm.ws.rsadapter.jdbc.WSJdbcStatement", "execut*")
            )
    );

    spy.add(
        spy.instrument("SQL_TNT4J_STREAMS_TRACKER2")
            .onEnter(
                    spy.fetchArg("THIS", 0),
                    tracer.isInTrace("HTTP") ? null : (tracer.isInTrace("SQL") ? null : tracer.begin("SQL")),
                    spy.format("SERVER", "SERVER"),
                    spy.format("APPL", "${THIS.parentWrapper.j2eeNameObj.ivApplication|SERVER}"),
                    tracer.attr("APPL", "APPL"),

                    __tnt4j.attrCorrelator(),
                    tracer.isInTrace("HTTP") ? null : tracer.formatAttr("MARKER", "SQL"),
                    tracer.formatAttr("EVENT_TYPE", "SEND"),
                    tracer.isInTrace("HTTP") ? null : tracer.flags(tracer.SUBMIT_TRACE),
                    spy.format("SQL", "${THIS.sql}"),
                    spy.format("DB", "${THIS.parentWrapper.mcf.dataSource.dataSourceJndiName}"),
                    spy.zorkaLog("DEBUG", "SQL", "########################execute2 ############# ${APPL} ####### ${JK_CORR_RID} ${JK_CORR_RID}  ${DB} ${SQL} ${THIS.class}"),
                    _trace
                        ? spy.subchain(
                            tracer.isInTrace("HTTP") ? null : tracer.begin("SQL", zorka.longCfg("sql.trace.time")),
                            tracer.attr("SQL", "SQL"),
                            __tnt4j.getThread(),
                            tracer.attr("DB", "DB"))
                        : null
            )
            .onError(
                    spy.fetchError("ERR"), 
                    _trace ? tracer.flags(tracer.SUBMIT_TRACE) : null, 
                    sql._error_chain
            )
            .onSubmit(spy.strTime("TIME"), sql._slow_chain, sql._stats_chain)
            .include(
                spy.byMethod("com.ibm.ws.rsadapter.jdbc.WSJdbcPreparedStatement", "execut*"),
                spy.byMethod("com.ibm.ws.rsadapter.jdbc.WSJdbcCallableStatement", "execut*")
            )
    );

    if (zorka.boolCfg("tracer")) {
        tracer.exclude("oracle.**");
        tracer.exclude("com.mysql.**");
    }

    return this;
}

tnt4j_sql = __tnt4j_sql ();