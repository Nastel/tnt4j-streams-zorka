/*
 * Copyright 2014-2016 JKOOL, LLC.
 *
 * This file is part of TNT4J-Streams-Zorka.
 *
 * TNT4J-Streams-Zorka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TNT4J-Streams-Zorka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with TNT4J-Streams-Zorka.  If not, see <http://www.gnu.org/licenses/>.
 */
  
zorka.require("tracer.bsh", "apache/tomcat.bsh");
  
// This script gets TNT4J Correlation IDs
  
__tnt4j() {

    _JK_CORR_SID = new ThreadLocal();
    _JK_CORR_RID = new ThreadLocal();
    _JK_ZORKA_PARENT_ID = new ThreadLocal();

    _attributeTntCorrIds() {
        return (com.jitlogic.zorka.core.spy.SpyProcessor) spy.subchain(
            spy.tlGet("JK_CORR_RID", _JK_CORR_RID),
            spy.tlGet("JK_CORR_SID", _JK_CORR_SID),
            spy.tlGet("JK_ZORKA_PARENT_ID", _JK_ZORKA_PARENT_ID),
            tracer.attr("JK_CORR_RID", "JK_CORR_RID"),
            tracer.attr("JK_CORR_SID", "JK_CORR_SID"),
            tracer.attr("JK_ZORKA_PARENT_ID", "JK_ZORKA_PARENT_ID")
        );
    }

    attributes_processor() {
        process(rec) {
            request = rec.get("REQ");
            if (req != null) {
                sid = request.getSession().getAttribute("JK_CORR_SID");
                _JK_CORR_SID.set(sid);
                rid = request.getSession().getAttribute("JK_CORR_RID");
                _JK_CORR_RID.set(rid);
                pid = request.getSession().getAttribute("JK_ZORKA_PARENT_ID");
                _JK_ZORKA_PARENT_ID.set(pid);
            }
            return rec;
        }
        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    spy.add(spy.instrument("CATALINA_TNT4J_STREAMS_TRACKER")
        .onEnter(
            spy.fetchArg("REQ", 1),
            spy.fetchArg("RESP", 2),
            attributes_processor(),
            spy.format("URI", "${REQ.request.requestURI}"),
            tracer.attr("URI", "URI")
         )
        .onReturn(
            spy.zorkaLog("DEBUG", "CORRELATORS FETCHING", "ON RETURN"),
            this._attributeTntCorrIds(),
            tracer.flags(tracer.SUBMIT_TRACE)
        )
        .include(spy.byMethod("org.apache.catalina.core.StandardEngineValve", "invoke")));

    return this;
}
			
tnt4j = __tnt4j();