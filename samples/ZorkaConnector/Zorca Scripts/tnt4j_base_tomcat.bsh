/*
 * Copyright 2014-2016 JKOOL, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
  
zorka.require("tracer.bsh", "apache/tomcat.bsh");
  
// This script gets TNT4J Correlation IDs
  
__tnt4j() {

    _JK_CORR_SID = new ThreadLocal();
    _JK_CORR_RID = new ThreadLocal();

    _attributeTntCorrIds() {
        return (com.jitlogic.zorka.core.spy.SpyProcessor) spy.subchain(
            spy.tlGet("JK_CORR_SID", _JK_CORR_SID),
            spy.tlGet("JK_CORR_RID", _JK_CORR_RID),
            tracer.attr("JK_CORR_SID", "JK_CORR_SID"),
            tracer.attr("JK_CORR_RID", "SQL_COR_RID")
        );
    }

    attributes_processor() {
        process(rec) {
            request = rec.get("REQ");
            if (req != null) {
                sid = request.getSession().getAttribute("JK_CORR_SID");
                _JK_CORR_SID.set(sid);
                rid = request.getSession().getAttribute("JK_CORR_RID");
                _JK_CORR_RID.set(rid);
            }
            return rec;
        }
        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    spy.add(spy.instrument("CATALINA_TNT4J_STREAMS_TRACKER")
        .onEnter(
            spy.fetchArg("REQ", 1),
            spy.fetchArg("RESP", 2),
            attributes_processor(),
            spy.format("URI", "${REQ.request.requestURI}"),
            tracer.attr("URI", "URI"),
            _attributeTntCorrIds()
        )
        .include(spy.byMethod("org.apache.catalina.core.StandardContextValve", "invoke")));

    return this;
}
			
tnt4j = __tnt4j();